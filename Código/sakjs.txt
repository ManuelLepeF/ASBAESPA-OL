import numpy as np
corpus = pd.read_csv('archivos/ex.csv')
frases = np.asarray(corpus[['A']])

frases


corpus = pd.read_csv('archivos/ex.csv')
X_frases = np.asarray(corpus[['A']])
Y_sentimiento = np.asarray(corpus[['B']])
X_frases = LimpiarCorpus(X_frases)
# 3. PARTIR CORPUS PARA ENTRENAR
X_train, X_test, Y_train, Y_test = train_test_split(X_frases, Y_sentimiento, test_size=0.30)

X_train

# 4. TOKENIZACION + VECTORIZACIO 
xtrain, xtest, vectorizer = Procesar_DatosML(xtrain=xtrain, xtest=xtest)
Algoritmo = "SVM"
# 5. MODELO
if(Algoritmo=="SVM"):
    modelo = svm.SVC(kernel='linear') 
    modelo.fit(X=xtrain,y=ytrain)
if(Algoritmo=="Random Forest"):
    modelo=RandomForestClassifier(n_estimators=10)
    modelo.fit(X=xtrain,y=ytrain)
if(Algoritmo=="Naive Bayes"):
    modelo = GaussianNB()
    modelo.fit(X=xtrain.toarray() ,y=ytrain)
# 6. PREDICT + METRICAS
prediccion = modelo.predict(xtest)
##print(pd.crosstab(ytest, prediccion, rownames=['REAL'], colnames=['PREDICCION']))
Metricas="Corpus "+"\nAlgoritmos ML: "+Algoritmo+"\n\n"
Metricas=Metricas+classification_report(ytest, prediccion)
print("Accuracy:",metrics.accuracy_score(ytest, prediccion))


corpus = pd.read_csv('archivos/ex.csv')
X_frases = np.asarray(corpus[['A']])
Y_sentimiento = np.asarray(corpus[['B']])
X_frases = LimpiarCorpus(X_frases)
# 3. PARTIR CORPUS PARA ENTRENAR
X_train, X_test, Y_train, Y_test = train_test_split(X_frases, Y_sentimiento, test_size=0.30)

X_train


Algoritmo = "SVM"
# 5. MODELO
if(Algoritmo=="SVM"):
    modelo = svm.SVC(kernel='linear') 
    modelo.fit(X=X_train,y=Y_train)
if(Algoritmo=="Random Forest"):
    modelo=RandomForestClassifier(n_estimators=10)
    modelo.fit(X=X_train,y=Y_train)
if(Algoritmo=="Naive Bayes"):
    modelo = GaussianNB()
    modelo.fit(X=X_train ,y=Y_train)
# 6. PREDICT + METRICAS
prediccion = modelo.predict(xtest)
##print(pd.crosstab(ytest, prediccion, rownames=['REAL'], colnames=['PREDICCION']))
Metricas="Corpus "+"\nAlgoritmos ML: "+Algoritmo+"\n\n"
Metricas=Metricas+classification_report(ytest, prediccion)
print("Accuracy:",metrics.accuracy_score(ytest, prediccion))

------------------------------------------------------------------------------------

# 4. TOKENIZACION + VECTORIZACIO 
xtrain, xtest, vectorizer = Procesar_DatosML(xtrain=xtrain, xtest=xtest)
Algoritmo = "SVM"
# 5. MODELO
if(Algoritmo=="SVM"):
    modelo = svm.SVC(kernel='linear') 
    modelo.fit(X=xtrain,y=ytrain)
if(Algoritmo=="Random Forest"):
    modelo=RandomForestClassifier(n_estimators=10)
    modelo.fit(X=xtrain,y=ytrain)
if(Algoritmo=="Naive Bayes"):
    modelo = GaussianNB()
    modelo.fit(X=xtrain.toarray() ,y=ytrain)
# 6. PREDICT + METRICAS
prediccion = modelo.predict(xtest)
##print(pd.crosstab(ytest, prediccion, rownames=['REAL'], colnames=['PREDICCION']))
Metricas="Algoritmo:"+Algoritmo + "\n\n"
Metricas=Metricas+classification_report(ytest, prediccion)
print("Accuracy:",metrics.accuracy_score(ytest, prediccion))

--------------------------------------------------------------------------------------------------------------------------------------------
corpus = pd.read_csv('archivos/ex.csv')
X_frases = np.asarray(corpus[['A']])
X_frases = X_frases.ravel()
Y_sentimiento = np.asarray(corpus[['B']])
Y_sentimiento = Y_sentimiento.ravel()
X_frases = LimpiarCorpus(X_frases)
# 3. PARTIR CORPUS PARA ENTRENAR
X_train, X_test, Y_train, Y_test = train_test_split(X_frases, Y_sentimiento, test_size=0.30)
# 4. TOKENIZACION + VECTORIZACIO
X_train, X_test, vectorizer = Procesar_DatosML(xtrain=X_test, xtest=Y_test)


X_train


------------------------------------------------------------------------------------------------------------------------------------------------
N_tweets_per_sentiment = 1000

all_strings = np.array([["tweet","sentiment"]])

strings = twitter_samples.strings('positive_tweets.json')
for string in strings[:N_tweets_per_sentiment]:
    all_strings = np.append(all_strings, [[string, "positive"]], axis=0)
    
strings = twitter_samples.strings('negative_tweets.json')
for string in strings[:N_tweets_per_sentiment]:
    all_strings = np.append(all_strings, [[string, "negative"]], axis=0)
    
data = pd.DataFrame(data=all_strings[1:,:], columns=all_strings[0])
import matplotlib.pyplot as plt







